name: Pipeline Artifacts

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/pipeline-artifacts.yml'
  schedule:
    # Run once per week on Monday at 2:00 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Allow manual triggering

env:
  ENVIRONMENT: dev
  PROJECT_NAME: python-libs
  AWS_REGION: us-east-1

jobs:
  build-artifacts:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          pip install pyinstaller pytest pytest-cov
      
      - name: Run tests with coverage
        run: |
          mkdir -p test-logs
          pytest --cov=src --cov-report=xml:test-logs/coverage.xml --junitxml=test-logs/junit.xml
      
      - name: Build executable
        run: |
          mkdir -p dist
          pyinstaller --onefile src/runners/run.py -n pomodoro
      
      - name: Package source code
        run: |
          mkdir -p artifacts/source
          git archive --format=zip HEAD -o artifacts/source/source-code.zip
      
      - name: Upload test logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: test-logs/
          retention-days: 7
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30
      
      - name: Upload source code artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: artifacts/source/
          retention-days: 30
      
      # Optional: Deploy to real AWS S3 if running on main branch
      - name: Check if we should upload to S3
        id: check-s3-upload
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: echo "should_upload=true" >> $GITHUB_OUTPUT

      # Use OIDC for AWS authentication with hardcoded placeholder
      - name: Configure AWS credentials
        if: steps.check-s3-upload.outputs.should_upload == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubActionsCDKRole
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Upload to S3
        if: steps.check-s3-upload.outputs.should_upload == 'true'
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          # Create metadata file
          echo "Build ID: $GITHUB_RUN_ID" > metadata.json
          echo "Run number: $GITHUB_RUN_NUMBER" >> metadata.json
          echo "Commit: $GITHUB_SHA" >> metadata.json
          echo "Build date: $(date)" >> metadata.json
          
          # Upload to S3
          aws s3 cp test-logs/ s3://${{ env.PROJECT_NAME }}-artifacts-${{ env.ENVIRONMENT }}/test-logs/ --recursive
          aws s3 cp dist/ s3://${{ env.PROJECT_NAME }}-artifacts-${{ env.ENVIRONMENT }}/final-artifacts/ --recursive
          aws s3 cp artifacts/source/ s3://${{ env.PROJECT_NAME }}-artifacts-${{ env.ENVIRONMENT }}/source/ --recursive
          aws s3 cp metadata.json s3://${{ env.PROJECT_NAME }}-artifacts-${{ env.ENVIRONMENT }}/codepipeline/pipeline-run-$GITHUB_RUN_ID.json
      
      - name: Create build summary
        run: |
          echo "## Build Artifacts Created u2705" >> $GITHUB_STEP_SUMMARY
          echo "Test logs, build artifacts, and source code have been uploaded as GitHub artifacts." >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check-s3-upload.outputs.should_upload }}" == "true" ]]; then
            echo "\nAll artifacts have also been uploaded to the S3 bucket:" >> $GITHUB_STEP_SUMMARY
            echo "s3://${{ env.PROJECT_NAME }}-artifacts-${{ env.ENVIRONMENT }}/" >> $GITHUB_STEP_SUMMARY
          fi
